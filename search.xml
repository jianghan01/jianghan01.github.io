<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>基于esp8266的nodemcu模块的扩展板设计</title>
      <link href="/2020/05/12/%E5%9F%BA%E4%BA%8Eesp8266%E7%9A%84nodemcu%E6%A8%A1%E5%9D%97%E7%9A%84%E6%89%A9%E5%B1%95%E6%9D%BF%E8%AE%BE%E8%AE%A1/"/>
      <url>/2020/05/12/%E5%9F%BA%E4%BA%8Eesp8266%E7%9A%84nodemcu%E6%A8%A1%E5%9D%97%E7%9A%84%E6%89%A9%E5%B1%95%E6%9D%BF%E8%AE%BE%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[<p>&emsp;    作为一名业余电子爱好者，但是手残，洞洞板要不焊不上，要不就是掉焊盘，或者烧坏电烙铁。偶然一天知道了嘉立创可以五元打板而且包邮，便萌生这个想法，设计好电路，直接打板，减少焊接量。<br>&emsp;   自己最开始玩ESP8266只是为了折腾一个物联网开关，贪图便宜买了esp8266-01s，买了编程器，结果编程器不支持win10，驱动打不上，然后买了基于esp8266的nodemcu模块,买了继电器模块，杜邦线等等。慢慢学了编程（还是菜鸟），学了一点点电路知识。</p><h2 id="开始介绍"><a href="#开始介绍" class="headerlink" title="开始介绍"></a>开始介绍</h2><ul><li>板子图片</li></ul><center>第一次打板的产品 正面（手动布线，没有检查）</center>![](https://tuchuang-1251287103.cos.ap-chongqing.myqcloud.com/tuchuangNodeMCU%E6%89%A9%E5%B1%95%E6%9D%BF%EF%BC%881%EF%BC%89.jpg)<center>第一次打板的产品 反面（手动布线，没有检查，有问题，后面飞线解决）</center>![](https://tuchuang-1251287103.cos.ap-chongqing.myqcloud.com/tuchuangNodeMCU%E6%89%A9%E5%B1%95%E6%9D%BF%EF%BC%882%EF%BC%89.jpg)<p>&emsp; 第一次画板没有什么经验，直接画PCB，所以不能通过线路检查直接打板，问题多多。第二次研究了一些一些esp8266的电路图，然后参照，就有了下面的这个图。</p><center>扩展版2.0电路图</center> ![](https://tuchuang-1251287103.cos.ap-chongqing.myqcloud.com/tuchuangNodeMCU%E6%89%A9%E5%B1%95%E6%9D%BF%E5%8E%9F%E7%90%86%E5%9B%BE.PNG)<center>正面</center> ![](https://tuchuang-1251287103.cos.ap-chongqing.myqcloud.com/tuchuangNodeMCU%E6%89%A9%E5%B1%95%E6%9D%BF%EF%BC%883%EF%BC%89.png)<center>反面</center> ![](https://tuchuang-1251287103.cos.ap-chongqing.myqcloud.com/tuchuangNodeMCU%E6%89%A9%E5%B1%95%E6%9D%BF%EF%BC%884%EF%BC%89.png)<h2 id="扩展口信息"><a href="#扩展口信息" class="headerlink" title="扩展口信息"></a>扩展口信息</h2><table><thead><tr><th>设备名</th><th>扩展口</th></tr></thead><tbody><tr><td>WS2812</td><td>D0</td></tr><tr><td>模拟接口</td><td>A0</td></tr><tr><td>预留IO</td><td>D4</td></tr><tr><td>0.96’OLED</td><td>SCL:D1</td></tr><tr><td></td><td>SDA:D2</td></tr><tr><td>DHT22</td><td>D3</td></tr><tr><td>K1</td><td>D5</td></tr><tr><td>K2</td><td>D6</td></tr><tr><td>K3</td><td>D7</td></tr><tr><td>K4</td><td>D8</td></tr></tbody></table><h2 id="其他信息"><a href="#其他信息" class="headerlink" title="其他信息"></a>其他信息</h2><ul><li>电路工程在立创开源平台 <span class="exturl" data-url="aHR0cHM6Ly9vc2h3aHViLmNvbS9qaWFuZ2hhbi9Ob2RlTUNVLTgyNjZrdW8temhhbi1iYW4=" title="https://oshwhub.com/jianghan/NodeMCU-8266kuo-zhan-ban">传送门<i class="fa fa-external-link"></i></span></li><li>程序大家可以自己写一些。我参照 <span class="exturl" data-url="aHR0cHM6Ly9naXRlZS5jb20veW91bmdfcGVvcGxlX29ubHlfbG92ZV9oZXIvTXlfRVNQODI2Ng==" title="https://gitee.com/young_people_only_love_her/My_ESP8266">小年轻只爱她<i class="fa fa-external-link"></i></span> 的程序进行魔改</li></ul>]]></content>
      
      
      <categories>
          
          <category> NodeMCU </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 物联网 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo博客安装教程</title>
      <link href="/2020/02/13/%E5%BB%BAhexo%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/"/>
      <url>/2020/02/13/%E5%BB%BAhexo%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h4 id="准备工作环境（软件如下，自行安装）"><a href="#准备工作环境（软件如下，自行安装）" class="headerlink" title="准备工作环境（软件如下，自行安装）"></a>准备工作环境（软件如下，自行安装）</h4><ol><li><span class="exturl" data-url="aHR0cHM6Ly9naXQtc2NtLmNvbS8=" title="https://git-scm.com/">git<i class="fa fa-external-link"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9jb2RlLnZpc3VhbHN0dWRpby5jb20v" title="https://code.visualstudio.com/">VS code<i class="fa fa-external-link"></i></span>（编辑文件）</li><li><span class="exturl" data-url="aHR0cHM6Ly9ub2RlanMub3JnL3poLWNuLw==" title="https://nodejs.org/zh-cn/">node.js<i class="fa fa-external-link"></i></span></li><li><span class="exturl" data-url="aHR0cDovL3d3dy53aW5yYXIuY29tLmNuLw==" title="http://www.winrar.com.cn/">winRAR<i class="fa fa-external-link"></i></span>(解压文件)</li></ol><h4 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h4><ol><li>运行CMD</li><li>换国内nmp源</li></ol><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">npm</span> config set registry https://registry.<span class="built_in">npm</span>.taobao.org     <span class="comment">#配置国内的镜像源</span></span><br><span class="line"><span class="built_in">npm</span> info hexo   <span class="comment"># 测试查看hexo的安装信息，是否是taobao.org的源</span></span><br></pre></td></tr></table></figure><ol start="3"><li>安装hexo（-g 指定全局安装，可以使用hexo命令）</li></ol><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span> -g hexo         <span class="comment"># 通过npm安装hexo</span></span><br></pre></td></tr></table></figure><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init <span class="keyword">blog </span> <span class="comment"># 初始化创建文件夹</span></span><br><span class="line">cd <span class="keyword">blog </span>    <span class="comment"># 进入blog文件夹</span></span><br><span class="line">npm <span class="keyword">install </span>    <span class="comment"># 安装</span></span><br></pre></td></tr></table></figure><ol start="4"><li>启动 hexo</li></ol><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">hexo</span> clean <span class="comment">#清理各种缓存和旧文件</span></span><br><span class="line">hexo g  <span class="comment">#生成静态文件</span></span><br><span class="line">hexo s  <span class="comment">#开启服务器预览</span></span><br></pre></td></tr></table></figure><p>浏览器打开<span class="exturl" data-url="aHR0cDovL2xvY2FsaG9zdDo0MDAw" title="http://localhost:4000">http://localhost:4000<i class="fa fa-external-link"></i></span>就可以看到安装完成后的界面</p><p><img data-src="https://tuchuang-1251287103.cos.ap-chongqing.myqcloud.com/tuchuang%E5%8D%9A%E5%AE%A2%E7%95%8C%E9%9D%A2.png" alt="博客界面"></p><p>到此安装完成</p><h4 id="hexo目录结构及相关命令"><a href="#hexo目录结构及相关命令" class="headerlink" title="hexo目录结构及相关命令"></a>hexo目录结构及相关命令</h4><ol><li>目录结构<figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── <span class="variable">_config</span>.yml</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">├── source</span><br><span class="line">|   ├── <span class="variable">_drafts</span></span><br><span class="line">|   └── <span class="variable">_posts</span></span><br><span class="line">└── themes</span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li>相关命令</li></ol><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">hexo new <span class="string">"postName"</span> #新建文章</span><br><span class="line">hexo new<span class="built_in"> page </span><span class="string">"pageName"</span> #新建页面</span><br><span class="line">hexo generate #生成静态页面至public目录</span><br><span class="line">hexo<span class="built_in"> server </span>#开启预览访问端口（默认端口4000，<span class="string">'ctrl + c'</span>关闭server）</span><br><span class="line">hexo deploy #将.deploy目录部署到GitHub</span><br><span class="line">hexo help  # 查看帮助</span><br><span class="line">hexo version  #查看Hexo的版本</span><br><span class="line">hexo deploy -g  #生成加部署</span><br><span class="line">hexo<span class="built_in"> server </span>-g  #生成加预览</span><br></pre></td></tr></table></figure><h4 id="上传到托管端"><a href="#上传到托管端" class="headerlink" title="上传到托管端"></a>上传到托管端</h4><p>支持托管的有github，gitee，腾讯cos等。</p><p>本文以部署到gitee为例（github部署与其相类似，腾讯cos请看<span class="exturl" data-url="aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC8zZDc5NmVjNTYxNjA=" title="https://www.jianshu.com/p/3d796ec56160">相关链接<i class="fa fa-external-link"></i></span>）</p><ol><li>gitee主页新建一个与自己个人空间名相同的仓库</li></ol><p><img data-src="https://tuchuang-1251287103.cos.ap-chongqing.myqcloud.com/tuchuang%E5%BB%BA%E7%AB%8B%E4%BB%93%E5%BA%931.png" alt=""></p><p><img data-src="https://tuchuang-1251287103.cos.ap-chongqing.myqcloud.com/tuchuang%E5%BB%BA%E7%AB%8B%E4%BB%93%E5%BA%932.png" alt=""></p><p><img data-src="https://tuchuang-1251287103.cos.ap-chongqing.myqcloud.com/tuchuang%E4%BB%93%E5%BA%93%E7%95%8C%E9%9D%A2.jpg" alt=""></p><ol start="2"><li>复制地址，到hexo的配置文件 _config.yml</li></ol><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">deploy:</span></span><br><span class="line"><span class="symbol">  type:</span> git                 <span class="meta"># type为git</span></span><br><span class="line"><span class="symbol">  repo:</span> https:<span class="comment">//gitee.com/somata/somata # 仓库的URL</span></span><br></pre></td></tr></table></figure><ol start="3"><li>安装一个hexo的插件</li></ol><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save    # 安装git插件</span><br><span class="line">git<span class="built_in"> config </span>--global user.email *********@qq.com # 设置gitee邮箱（gitee的注册邮箱）</span><br><span class="line">git<span class="built_in"> config </span>--global user.name <span class="string">'****'</span>            # 设置用户名（git的注册昵称）</span><br><span class="line">hexo deploy # 上传到gitee</span><br></pre></td></tr></table></figure><p>在上传时，需要再次输入gitee的注册邮箱作为username，账户密码作为password</p><p>然后打开仓库</p><p><img data-src="https://tuchuang-1251287103.cos.ap-chongqing.myqcloud.com/tuchuang%E9%83%A8%E7%BD%B21.png" alt=""></p><p><img data-src="https://tuchuang-1251287103.cos.ap-chongqing.myqcloud.com/tuchuang%E9%83%A8%E7%BD%B22.png" alt=""></p><p>打开链接，就可以看到了</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BP神经网络运行说明</title>
      <link href="/2020/02/09/BP%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E8%BF%90%E8%A1%8C%E8%AF%B4%E6%98%8E/"/>
      <url>/2020/02/09/BP%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E8%BF%90%E8%A1%8C%E8%AF%B4%E6%98%8E/</url>
      
        <content type="html"><![CDATA[<h2 id="BP神经网络思想"><a href="#BP神经网络思想" class="headerlink" title="BP神经网络思想"></a>BP神经网络思想</h2><p>&emsp; 利用输出后的误差来估计输出层前一层的误差，再用这层误差来估计更前一层误差，如此获取所有各层误差估计。这里的误差估计可以理解为某种偏导数，我们就是根据这种偏导数来调整各层的连接权值，再用调整后的连接权值重新计算输出误差。直到输出的误差达到符合的要求或者迭代次数溢出设定值。<br>&emsp; 假设我们的网络结构是一个含有N个神经元的输入层，含有P个神经元的隐层，含有Q个神经元的输出层。结构如下：</p><p><img data-src="https://tuchuang-1251287103.cos.ap-chongqing.myqcloud.com/tuchuang%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C.jpg" alt="神经网络"></p><h2 id="神经网络建模内容"><a href="#神经网络建模内容" class="headerlink" title="神经网络建模内容"></a>神经网络建模内容</h2><p>清空环境变量</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">clc<span class="comment">;</span></span><br><span class="line">clear<span class="comment">;</span></span><br></pre></td></tr></table></figure><h2 id="导入原始数据"><a href="#导入原始数据" class="headerlink" title="导入原始数据"></a>导入原始数据</h2><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">导入输入数据（P）  <span class="comment">//为行向量</span></span><br><span class="line"><span class="keyword">load</span> X: \p.txt</span><br><span class="line"></span><br><span class="line">导入输出数据（T）  <span class="comment">//为行向量</span></span><br><span class="line"><span class="keyword">load</span> X: \t.txt</span><br></pre></td></tr></table></figure><h2 id="保存变量"><a href="#保存变量" class="headerlink" title="保存变量"></a>保存变量</h2><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">save</span> p.<span class="keyword">mat</span>;</span><br><span class="line"><span class="keyword">save</span> t.<span class="keyword">mat</span>;</span><br></pre></td></tr></table></figure><h2 id="归一化操作"><a href="#归一化操作" class="headerlink" title="归一化操作"></a>归一化操作</h2><p>归一化函数：mapminmax函数，使数值归一化到[-1.1]之间<br>用法：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[pn,<span class="keyword">ps</span>] =mapminmax(<span class="keyword">p</span>,ymin,ymax)</span><br><span class="line">[<span class="keyword">tn</span>,<span class="keyword">ts</span>] =mapminmax(t,ymin,ymax)</span><br></pre></td></tr></table></figure><p>x需归化的数据输入，ymin，ymax为需归化到的范围，不填默认为归化到[-1,1]</p><h2 id="确定训练数据集"><a href="#确定训练数据集" class="headerlink" title="确定训练数据集"></a>确定训练数据集</h2><p>测试数据,一般是随机的从样本中选取70%的数据作为训练数据，15%的数据作为测试数据。<br>函数：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Q=[x,y];</span><br><span class="line">[x,y,c]= dividerand(Q,trainRatio,valRatio,testRatio)</span><br><span class="line"><span class="attribute">px</span>=x(1:3,:); <span class="attribute">py</span>=y(1:3,:); <span class="attribute">pc</span>=c(1:3,:);</span><br><span class="line"><span class="attribute">tx</span>=x(4,:); <span class="attribute">ty</span>=y(4,:); <span class="attribute">tc</span>=c(4,:);</span><br><span class="line">% px为训练数据，py为验证数据，pc为测试数据</span><br></pre></td></tr></table></figure><p>示例代码</p><p>// px为训练数据，py为验证数据，pc为测试数据</p><h2 id="建立网络对象"><a href="#建立网络对象" class="headerlink" title="建立网络对象"></a>建立网络对象</h2><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net = newff(<span class="name">minmax</span>(<span class="name">p</span>),[隐层的神经元的个数，输出层的神经元的个数],&#123;隐层神经元的传输函数，输出层的传输函数｝,'反向传播的训练函数')</span><br></pre></td></tr></table></figure><p>其中p为输入数据，t为输出数据</p><h2 id="示例函数"><a href="#示例函数" class="headerlink" title="示例函数"></a>示例函数</h2><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">net</span>=newff(input,output, [<span class="number">49</span>,<span class="number">14</span>], &#123;<span class="string">'tansig'</span>,<span class="string">'tansig'</span>,<span class="string">'tansig'</span>&#125;,<span class="string">'traingdx'</span>)<span class="comment">;</span></span><br></pre></td></tr></table></figure><p> //新定义函数</p><h2 id="网络参数的设置"><a href="#网络参数的设置" class="headerlink" title="网络参数的设置"></a>网络参数的设置</h2><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">net.trainParam.epochs</span>=<span class="number">10000</span><span class="comment">;%训练次数设置</span></span><br><span class="line"><span class="attr">net.trainParam.goal</span>=<span class="number">1</span>e-<span class="number">7</span><span class="comment">;%训练目标设置</span></span><br><span class="line"><span class="attr">net.trainParam.lr</span>=<span class="number">0.01</span><span class="comment">;%学习率设置,应设置为较少值，太大虽然会在开始加快收敛速度，但临近最佳点时，会产生动荡，而致使无法收敛 </span></span><br><span class="line"><span class="attr">net.trainParam.mc</span>=<span class="number">0.9</span><span class="comment">;%动量因子的设置，默认为0.9 </span></span><br><span class="line"><span class="attr">net.trainParam.show</span>=<span class="number">25</span><span class="comment">;%显示的间隔次数</span></span><br></pre></td></tr></table></figure><h2 id="指定训练参数"><a href="#指定训练参数" class="headerlink" title="指定训练参数"></a>指定训练参数</h2><p>示例算法</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">net.trainFcn</span> = <span class="string">'traingd'</span><span class="comment">; % 梯度下降算法</span></span><br><span class="line"><span class="attr">net.trainFcn</span> = <span class="string">'traingdm'</span><span class="comment">; % 动量梯度下降算法</span></span><br><span class="line"><span class="attr">net.trainFcn</span> = <span class="string">'traingda'</span><span class="comment">; % 变学习率梯度下降算法</span></span><br><span class="line"><span class="attr">net.trainFcn</span> = <span class="string">'traingdx'</span><span class="comment">; % 变学习率动量梯度下降算法</span></span><br></pre></td></tr></table></figure><p>(大型网络的首选算法)</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">net.trainFcn</span> = <span class="string">'trainscg'</span><span class="comment">; % ScaledConjugate Gradient算法,内存需求与Fletcher-Reeves修正算法相同,计算量比上面三种算法都小很多</span></span><br><span class="line"><span class="attr">net.trainFcn</span> = <span class="string">'trainbfg'</span><span class="comment">; %Quasi-Newton Algorithms - BFGS Algorithm,计算量和内存需求均比共轭梯度算法大,但收敛比较快</span></span><br><span class="line"><span class="attr">net.trainFcn</span> = <span class="string">'trainoss'</span><span class="comment">; % OneStep Secant Algorithm,计算量和内存需求均比BFGS算法小,比共轭梯度算法略大</span></span><br></pre></td></tr></table></figure><p>(中型网络的首选算法)</p><figure class="highlight erlang-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">net.trainFcn = <span class="string">'trainlm'</span>; <span class="comment">%Levenberg-Marquardt算法,内存需求最大,收敛速度最快</span></span><br><span class="line">net.trainFcn = <span class="string">'trainbr'</span>; <span class="comment">% 贝叶斯正则化算法</span></span><br><span class="line">S</span><br><span class="line">有代表性的五种算法为:<span class="string">'traingdx'</span>,<span class="string">'trainrp'</span>,<span class="string">'trainscg'</span>,<span class="string">'trainoss'</span>, <span class="string">'trainlm'</span></span><br></pre></td></tr></table></figure><h2 id="选用算法"><a href="#选用算法" class="headerlink" title="选用算法"></a>选用算法</h2><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">net</span>.trainFcn='trainlm'; </span><br><span class="line">[<span class="keyword">net</span>,tr]=train(<span class="keyword">net</span>,px,tx);  <span class="comment">//px：训练数据 ，tx：训练数据</span></span><br></pre></td></tr></table></figure><h2 id="计算仿真"><a href="#计算仿真" class="headerlink" title="计算仿真"></a>计算仿真</h2><p>计算仿真，其一般用sim函数</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[normtrainoutput,trainPerf]=sim(net,px,[],[],tx);<span class="comment">%训练的数据，根据BP得到的结果 //px：训练数据 ，tx：训练数据</span></span><br><span class="line">[normvalidateoutput,validatePerf]=sim(net,py,[],[],ty);<span class="comment">%验证的数据，经BP得到的结果//py：验证数据，ty：验证数据</span></span><br><span class="line">normtestoutput,testPerf]=sim(net,pc,[],[],tc);<span class="comment">%测试数据，经BP得到的结果//pc：测试数据，tc：测试数据</span></span><br></pre></td></tr></table></figure><h2 id="反归一化"><a href="#反归一化" class="headerlink" title="反归一化"></a>反归一化</h2><p>将所得的结果进行反归一化，得到其拟合的数据</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">trainoutput</span>=mapminmax(<span class="string">'reverse'</span>,normtrainoutput,ts)<span class="comment">;</span></span><br><span class="line"><span class="attr">validateoutput</span>=mapminmax(<span class="string">'reverse'</span>,normvalidateoutput,ts)<span class="comment">;</span></span><br><span class="line"><span class="attr">testoutput</span>=mapminmax(<span class="string">'reverse'</span>,normtestoutput,ts)<span class="comment">;</span></span><br></pre></td></tr></table></figure><p>正常输入的数据的反归一化的处理，得到其正式值</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">trainvalue</span>=mapminmax(<span class="string">'reverse'</span>,tx,ts)<span class="comment">;%正常的验证数据</span></span><br><span class="line"><span class="attr">validatevalue</span>=mapminmax(<span class="string">'reverse'</span>,ty,ts)<span class="comment">;%正常的验证的数据</span></span><br><span class="line"><span class="attr">testvalue</span>=mapminmax(<span class="string">'reverse'</span>,tc,ts)<span class="comment">;%正常的测试数据</span></span><br></pre></td></tr></table></figure><h2 id="数据预测"><a href="#数据预测" class="headerlink" title="数据预测"></a>数据预测</h2><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">pnew<span class="type"></span>=[<span class="number">100</span>,<span class="number">50</span>,<span class="number">15</span>]<span class="string">';  //输入需要预测的数据</span></span><br><span class="line"><span class="string">pnewn=mapminmax(pnew);</span></span><br><span class="line"><span class="string">pnew=pnew'</span>;</span><br><span class="line">anew<span class="type">n</span>=sim(net,pnew<span class="type">n</span>);</span><br><span class="line">anew<span class="type"></span>=mapminmax(<span class="string">'reverse'</span>,anew<span class="type">n</span>,ts);</span><br><span class="line"><span class="comment">//绝对误差的计算</span></span><br><span class="line">errors=trainvalue-trainoutput;</span><br><span class="line">plotregression  <span class="comment">//拟合图</span></span><br><span class="line">figure,plotregression(trainvalue,trainoutput)</span><br><span class="line"><span class="comment">// 误差图</span></span><br><span class="line">figure,plot(<span class="number">1</span>:<span class="type">length</span>(errors),errors,<span class="string">'-b'</span>)</span><br><span class="line">title(<span class="string">'误差变化图'</span>)</span><br><span class="line"><span class="comment">// 误差值的正态性的检验</span></span><br><span class="line">figure,hist(errors);  <span class="comment">//频数直方图</span></span><br><span class="line">figure,normplot(errors);  <span class="comment">//Q-Q图</span></span><br><span class="line">[muhat,sigmahat,muci,sigmaci]=normfit(errors);  <span class="comment">//参数估计 均值,方差,均值的0.95置信区间,方差的0.95置信区间</span></span><br><span class="line">[h1,sig,ci]= ttest(errors,muhat);  <span class="comment">//假设检验</span></span><br><span class="line">figure, ploterrcorr(errors); <span class="comment">//绘制误差的自相关图</span></span><br><span class="line">figure, parcorr(errors); <span class="comment">//绘制偏相关图</span></span><br><span class="line">anew  <span class="type"></span>//预测数据输出</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> matlab </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
